{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "33801a2a_b7023efb",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "these additional params should be added to the help text above",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93f8c5d0_3992b603",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "on my TODO list once the command line arguments approach will be finalized",
      "parentUuid": "33801a2a_b7023efb",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4248ab4f_b7fca910",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-17T03:34:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93f8c5d0_3992b603",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9710aabe_d7100411",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 5
      },
      "lineNbr": 205,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "For simplicity/safety, could we remove this param? If an external proto file is specified, we can assume it is vendor since all platform/system atoms are in atoms.proto. It reduces the risk of accidentally calling stats-log-api-gen with an external proto but forgetting to pass vendor, or passing vendor when it shouldn\u0027t be passed.",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2faa3efb_374c9b58",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 5
      },
      "lineNbr": 205,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "From technical point of view there is no limitation to include \u0026 parse external proto file and generate logging code based on AStatsEvent (default)\n\nSince it is in AOSP - I think it is reasonable to not make make the assumption about how this tool could be used by OEM/customers\n\nStill, to simplify we could call the argument explicitly as `--vendor-proto` and then apply code gen path as for vendor atoms only\n\nwdyt?",
      "parentUuid": "9710aabe_d7100411",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead9ef79_dd5c0f0a",
        "filename": "stats/stats_log_api_gen/native_writer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 446,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "It is a little hard to say which is better without knowing what the code will eventually look like, but another way to do this is to have a separate function called write_stats_log_cpp_vendor(); instead of adding vendor here. I don\u0027t know if this is a better approach or not. My thoughts\n\n - Separating it means fewer changes to existing codepaths\n - the cpp code will look very different from platform atoms (VendorAtom vs StatsEvent)\n - We can share code like write_native_method_signature() or write_namespace() as needed to avoid duplication\n \nWDYT? I\u0027m open to either approach",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4ef3285_2cee5b95",
        "filename": "stats/stats_log_api_gen/native_writer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 446,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "for the first milestone we do not have a functions definition generation at all\n\nseems acceptable to skip changes to cpp file entirely\n\nand handle it in main.cpp to skip code generation for vendor/cpp use case",
      "parentUuid": "ead9ef79_dd5c0f0a",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d24529ee_af7f49db",
        "filename": "stats/stats_log_api_gen/native_writer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "Given the higher overlap in shared code, I think it makes sense to add vendor as a param to writing the header file like you\u0027ve done. However, to keep the diff a little simpler, can we wrap everything below this line in this if case, rather than separating it out into two? (Can definitely change things when we add the logging methods)\n\n    if (!vendorLogging) {\n        write struct BytesField;\n        write native method headers;\n        etc...\n    }\n    write_closing_namespace",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a598e8b5_8c6213b0",
        "filename": "stats/stats_log_api_gen/native_writer.cpp",
        "patchSetId": 5
      },
      "lineNbr": 558,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "alternative is to define another API like you have suggested above - write_stats_log_header_vendor\n\nand reuse code to generate atom ids, enums constants preliminarily extracting corresponding implementation into separate APIs to be reused:\n```\nvoid write_stats_log_header_vendor() {\n   write_preamble()\n   write_native_atom_constants()\n   write_native_atom_enums()\n   \n   // vendor atoms specific logging apis\n\n   write_epilogue()\n}\n\nvs\n\nvoid write_stats_log_header() {\n   write_preamble()\n   write_native_atom_constants()\n   write_native_atom_enums()\n   \n   // platform atoms specific logging apis\n\n   write_epilogue()\n}\n\n```\n\nwdyth?",
      "parentUuid": "d24529ee_af7f49db",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1a75b79_8476002a",
        "filename": "stats/stats_log_api_gen/test_api_gen_vendor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "Could we run these tests on a separate test vendor atoms file, like we do for the collation? I think it helps to decouple depepdencies",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d7ab2916_16efaf2c",
        "filename": "stats/stats_log_api_gen/test_api_gen_vendor.cpp",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c1a75b79_8476002a",
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "485131a3_81c6628f",
        "filename": "stats/stats_log_api_gen/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1286922
      },
      "writtenOn": "2022-12-16T04:56:02Z",
      "side": 1,
      "message": "nit; is virtual needed?",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 78,
        "endChar": 11
      },
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32ab79b1_a16e113b",
        "filename": "stats/stats_log_api_gen/utils.h",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1827146
      },
      "writtenOn": "2022-12-16T20:04:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "485131a3_81c6628f",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 78,
        "endChar": 11
      },
      "revId": "e1223f4c67818ba35827145a19d1553d2c215516",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}