{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1f8481c7_3e3b505a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2022-01-11T20:23:30Z",
      "side": 1,
      "message": "Note that the build failures look real and potentially important.",
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "604eba34_de52e020",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2022-01-11T19:26:00Z",
      "side": 1,
      "message": "Can we not reuse --rustHeader here?  How exactly do those two interact?  Maybe use the same flag but only write the header if there\u0027s no --rust?",
      "range": {
        "startLine": 34,
        "startChar": 25,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1b40f49e_671acc01",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2022-01-11T20:09:04Z",
      "side": 1,
      "message": "from what I understand, rustHeader is the file output of stats-log-api-gen tool. \n--rust flag is the similar output file for the statslog.rs or similar file $(genDir)/statslog_virtualization.rs\n\nThe crate name is given by rust_library ruleee(https://android-review.googlesource.com/c/platform/frameworks/proto_logging/+/1925959/comment/604eba34_de52e020/), which uses this generated rustHeader file. And then this crate in passed to stats-log-api-gen to generate the logstats library. \n\nTechnically, we could give the crate name same as the rustHeader(which is a filename  $(genDir)/statslog_header.rs\", so we will have to do some string operations to extract the crate name). We will also need to find a way to enforce the naming convention between rust_header file \u0026 he crate name.\n\nYou can take a look at https://r.android.com/c/platform/packages/modules/Virtualization/+/1924559/9/Android.bp#43",
      "parentUuid": "604eba34_de52e020",
      "range": {
        "startLine": 34,
        "startChar": 25,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed481a42_14480adf",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2022-01-11T20:23:30Z",
      "side": 1,
      "message": "Maybe then change the description here so it gives a bit more context?  E.g., that this is used for the non-header Rust code to use to refer to the header?",
      "parentUuid": "1b40f49e_671acc01",
      "range": {
        "startLine": 34,
        "startChar": 25,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "272e52af_388fc66d",
        "filename": "stats/stats_log_api_gen/main.cpp",
        "patchSetId": 7
      },
      "lineNbr": 34,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2022-01-13T17:41:16Z",
      "side": 1,
      "message": "Done, it is hard to get the description right, any suggestion?",
      "parentUuid": "ed481a42_14480adf",
      "range": {
        "startLine": 34,
        "startChar": 25,
        "endLine": 34,
        "endChar": 40
      },
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab52a8e4_30c86e15",
        "filename": "stats/stats_log_api_gen/rust_writer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2022-01-11T19:26:00Z",
      "side": 1,
      "message": "My one worry about importing wildcards (which I think is why I tried to avoid it) is that they could theoretically conflict with some of the atoms.  Could that happen, or does some naming scheme prevent it?",
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7d96011_2c83999a",
        "filename": "stats/stats_log_api_gen/rust_writer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2022-01-11T20:09:04Z",
      "side": 1,
      "message": "i think you are right, if one of my field (like Hypervisor) was called \"StatsResult\", there would be conflicts. I can change this to use fully qualified name.\nIs it alright if I declare a global variable `headerCrate` in. rust_writer.cpp? Otherwise it will require a lot of changes in function signatures to pass this around/",
      "parentUuid": "ab52a8e4_30c86e15",
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d90a9cb1_02046c39",
        "filename": "stats/stats_log_api_gen/rust_writer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1208973
      },
      "writtenOn": "2022-01-11T20:23:30Z",
      "side": 1,
      "message": "None of the language writer seem to use globals, so passing it around does seem to match the existing code more.  But the stats team can weigh in here if they want.",
      "parentUuid": "e7d96011_2c83999a",
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "766e7e3f_dad9a3f3",
        "filename": "stats/stats_log_api_gen/rust_writer.cpp",
        "patchSetId": 7
      },
      "lineNbr": 527,
      "author": {
        "id": 1897307
      },
      "writtenOn": "2022-01-13T17:41:16Z",
      "side": 1,
      "message": "Ack, done",
      "parentUuid": "d90a9cb1_02046c39",
      "revId": "789b2962ba94a0cee3a206a6dc6daa95ca0bc0ad",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}