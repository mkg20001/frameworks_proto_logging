//
// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "log.h"

#include "codegen_java.h"

#include <stdio.h>

namespace android {
namespace express {

void writeJavaFilePreamble(FILE* fd) {
    fprintf(fd, "// DO NOT EDIT THIS FILE\n");
    fprintf(fd, "// This is auto-generated file by express_log_api_gen\n\n");
}

void writeJavaPackagePreamble(FILE* fd, const std::string& packageName) {
    fprintf(fd, "package %s;\n\n", packageName.c_str());

    fprintf(fd, "import java.util.HashMap;\n\n");

    fprintf(fd, "import com.android.internal.util.ExpressLogHelper;\n\n");
}

void writeJavaHashMapInitFunction(FILE* fd, const MetricInfoMap& metricsIds) {
    fprintf(fd, "private static HashMap<String, Long> metricIds;\n");
    fprintf(fd, "static {\n");
    fprintf(fd, "    metricIds = new HashMap<String, Long>();\n");
    for (const auto& metricInfo : metricsIds) {
        fprintf(fd, "    metricIds.put(\"%s\", %ldl);\n", metricInfo.first.c_str(),
                metricInfo.second.hash());
    }
    fprintf(fd, "}\n\n");
}

void writeJavaHashMapGetFunction(FILE* fd) {
    fprintf(fd, "public static Long getMetricHash(String s) {\n");
    fprintf(fd, "    return metricIds.get(s);\n");
    fprintf(fd, "}\n\n");
}

bool CodeGeneratorJava::generateCodeImpl(FILE* fd, const MetricInfoMap& metricsIds) {
    writeJavaFilePreamble(fd);
    writeJavaPackagePreamble(fd, mPackageName);

    // TODO: add class name
    fprintf(fd, "public final class %s {\n", mClassName.c_str());

    writeJavaHashMapInitFunction(fd, metricsIds);
    writeJavaHashMapGetFunction(fd);

    fprintf(fd, "public static void logIncrement(String metricId) {\n");
    fprintf(fd, "    logIncrement(metricId, 1);\n");
    fprintf(fd, "}\n\n");

    fprintf(fd, "public static void logIncrement(String metricId, long amount) {\n");
    fprintf(fd, "    long metricIdHash = getMetricHash(metricName);\n");
    fprintf(fd, "    ExpressLogHelper.write(\n");
    fprintf(fd, "        ExpressLogHelper.EXPRESS_EVENT_REPORTED, metricIdHash, amount);\n");
    fprintf(fd, "}\n");

    fprintf(fd, "}\n\n");

    return true;
}

}  // namespace express
}  // namespace android
