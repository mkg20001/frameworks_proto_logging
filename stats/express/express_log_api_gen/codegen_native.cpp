//
// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

#include "log.h"

#include "codegen_native.h"

#include <stdio.h>

#include "utils.h"

namespace android {
namespace express {

void writeNativeFilePreamble(FILE* fd) {
    fprintf(fd, "// DO NOT EDIT THIS FILE\n");
    fprintf(fd, "// This is auto-generated file by express_log_api_gen\n\n");
}

void writeNamespacePreamble(FILE* fd, const std::vector<std::string>& namespaces) {
    for (const auto& ns : namespaces) {
        fprintf(fd, "namespace %s {\n", ns.c_str());
    }
    fprintf(fd, "\n");
}

void writeHashMapInitFunction(FILE* fd, const MetricInfoMap& metricsIds) {
    fprintf(fd, "std::unordered_map<std::string, int64_t> initHashMap() {\n");
    fprintf(fd, "    std::unordered_map<std::string, int64_t> result;\n");
    for (const auto& metricInfo : metricsIds) {
        fprintf(fd, "    result[\"%s\"] = %ld;\n", metricInfo.first.c_str(),
                metricInfo.second.hash());
    }
    fprintf(fd, "    return result;\n");
    fprintf(fd, "}\n\n");
}

void writeHashMapGetFunction(FILE* fd, const MetricInfoMap& /*metricsIds*/) {
    fprintf(fd, "int64_t getHash(const char* metricId) {\n");
    fprintf(fd, "    static std::unordered_map<std::string, int64_t> hashMap = initHashMap();\n");
    fprintf(fd, "    return hashMap[metricId];\n");
    fprintf(fd, "}\n\n");
}

void writeNamespacePostamble(FILE* fd, const std::vector<std::string>& namespaces) {
    for (auto it = namespaces.rbegin(); it != namespaces.rend(); it++) {
        fprintf(fd, "} // namespace %s\n", it->c_str());
    }
}

bool CodeGeneratorNativeHeader::generateCodeImpl(FILE* fd, const MetricInfoMap& /*metricsIds*/) {
    const std::vector<std::string> namespaceVec = split(mNamespaces, ",");

    writeNativeFilePreamble(fd);

    fprintf(fd, "#include <string>\n");

    writeNamespacePreamble(fd, namespaceVec);

    fprintf(fd, "class Counter {\n");
    fprintf(fd, "public:\n");
    fprintf(fd, "    static void logIncrement(const char* metricId, int64_t amount = 1);\n");
    fprintf(fd, "};\n\n");

    writeNamespacePostamble(fd, namespaceVec);

    return true;
}

bool CodeGeneratorNativeCpp::generateCodeImpl(FILE* fd, const MetricInfoMap& metricsIds) {
    const std::vector<std::string> namespaceVec = split(mNamespaces, ",");

    writeNativeFilePreamble(fd);

    fprintf(fd, "#include <statslog_express.h>\n");
    fprintf(fd, "#include \"%s\"\n\n", mIncludeHeader.c_str());
    fprintf(fd, "#include <stdint.h>\n");
    fprintf(fd, "#include <string>\n");
    fprintf(fd, "#include <unordered_map>\n\n");

    writeNamespacePreamble(fd, namespaceVec);

    writeHashMapInitFunction(fd, metricsIds);
    writeHashMapGetFunction(fd, metricsIds);

    fprintf(fd, "void Counter::logIncrement(const char* metricName, int64_t amount) {\n");
    fprintf(fd, "    const int64_t matricIdHash = getHash(metricName);\n");
    fprintf(fd, "    stats_write(EXPRESS_EVENT_REPORTED, matricIdHash, amount);\n");
    fprintf(fd, "}\n\n");

    writeNamespacePostamble(fd, namespaceVec);

    return true;
}

}  // namespace express
}  // namespace android
