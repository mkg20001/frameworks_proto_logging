/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
syntax = "proto2";
package android.os.statsd.credentials;

option java_package = "com.android.os.credentials";
option java_multiple_files = true;

import "frameworks/proto_logging/stats/atoms.proto";
import "frameworks/proto_logging/stats/atom_field_options.proto";

extend Atom {
    optional CredentialManagerApiCalled credential_manager_api_called = 585 [(module) = "framework"];
    optional CredentialManagerInitialPhaseReported credential_manager_init_phase_reported = 651 [(module) = "framework"];
    optional CredentialManagerCandidatePhaseReported credential_manager_candidate_phase_reported = 652 [(module) = "framework"];
    optional CredentialManagerFinalPhaseReported credential_manager_final_phase_reported = 653 [(module) = "framework"];
}


/**
 * ProviderStatus needed throughout the logging. Reveals
 * the status of candidate and chosen providers.
 */
enum ProviderStatus {
    PROVIDER_UNKNOWN = 0;
    // Indicates a successful query phase
    PROVIDER_QUERY_SUCCESS = 1;
    // Indicates a successful final phase
    PROVIDER_FINAL_SUCCESS = 2;
    // Indicates a query failure
    PROVIDER_QUERY_FAILURE = 3;
    // Indicates general failure during our final phase
    PROVIDER_FINAL_FAILURE = 4;
}

/**
 * Used to represent the various entries shown
 * to the user, used throughout the logging.
 */
enum EntryEnum {
    UNKNOWN = 0;
    ACTION_ENTRY = 1;
    CREDENTIAL_ENTRY = 2;
    REMOTE_ENTRY = 3;
    AUTHENTICATION_ENTRY = 4;
}


/**
 * Used to represent the Api Names
 * that are captured in the flow.
 */
enum ApiName {
    API_NAME_UNKNOWN = 0;
    API_NAME_GET_CREDENTIAL = 1;
    API_NAME_CREATE_CREDENTIAL = 2;
    API_NAME_CLEAR_CREDENTIAL = 3;
    API_NAME_IS_ENABLED_CREDENTIAL_PROVIDER_SERVICE = 4;
    API_NAME_SET_ENABLED_PROVIDERS = 5;
    API_NAME_GET_CREDENTIAL_PROVIDER_SERVICES = 6;
    API_NAME_REGISTER_CREDENTIAL_DESCRIPTION = 7;
    API_NAME_UNREGISTER_CREDENTIAL_DESCRIPTION = 8;
}

/**
 * Used to represent the Api Status
 * at the conclusion of the flow.
 */
enum ApiStatus {
    API_STATUS_UNKNOWN = 0;
    API_STATUS_SUCCESS = 1;
    API_STATUS_FAILURE = 2;
    API_STATUS_USER_CANCELED = 3;
    API_STATUS_CLIENT_CANCELED = 4;
}

/**
 * Logs when a CredentialManager api is called before the query phase.
 * Logged from:
 *   frameworks/base/services/credentials/java/com/android/server/credentials/...
 */
message CredentialManagerInitialPhaseReported {
    // The api name
    optional ApiName api_name = 1;
    // The calling app uid
    optional int32 caller_uid = 2 [(is_uid) = true];
    // A unique number to identify split emits
    optional int32 session_id = 3;
    // A sequence id to chronologically connect emits given races
    optional int32 sequence_num = 4;

    // Reference nanoseconds for the start of the service call
    optional int64 initial_timestamp_reference_nanoseconds = 5;

    // A count of the number of request class types
    optional int32 count_credential_request_classtypes = 6;
}

/**
 * Logs when a CredentialManager APIâ€™s query phase finishes.
 * Logged from:
 *   frameworks/base/services/credentials/java/com/android/server/credentials/...
 */
message CredentialManagerCandidatePhaseReported {
    // A unique number to identify split emits
    optional int32 session_id = 1;
    // A sequence id to chronologically connect emits given races
    optional int32 sequence_num = 2;
    // A checkpoint indicating the query returned
    // Query Start attempt is guaranteed by this emit
    optional bool query_returned = 3;

    // Interaction with providers

    // Candidate Provider Section

    repeated int32 candidate_provider_uid = 4 [(is_uid) = true];
    // The timestamp, normalized from call began as '0' when the query phase starts
    repeated int32 candidate_provider_query_start_timestamp_microseconds = 5;
    // The timestamp when the query phase ends
    repeated int32 candidate_provider_query_end_timestamp_microseconds = 6;
    // The status of the candidate provider
    repeated ProviderStatus candidate_provider_status = 7;
    // A bit to indicate if the provider threw an exception
    repeated bool candidate_provider_has_exception = 8;
    // Indicates the number of available entries for this provider
    repeated int32 candidate_provider_num_entries = 9;
    // The number of action entries
    repeated int32 candidate_provider_action_entry_count = 10;
    // The number of credential entries
    repeated int32 candidate_provider_credential_entry_count = 11;
    // The number of *types* of credential entries
    repeated int32 candidate_provider_credential_entry_type_count = 12;
    // The number of remote entries
    repeated int32 candidate_provider_remote_entry_count = 13;
    // The number of authentication entries
    repeated int32 candidate_provider_authentication_entry_count = 14;
}

/**
 * Logs when a the UI Phase finishes and the credential is being returned.
 * Logged from:
 *   frameworks/base/services/credentials/java/com/android/server/credentials/...
 */
message CredentialManagerFinalPhaseReported {
    // A unique number to identify split emits
    optional int32 session_id = 1;
    // A sequence id to chronologically connect emits given races
    optional int32 sequence_num = 2;
    // A checkpoint indicating the ui returned and final response began
    // Ui start is guaranteed given this emit
    optional bool ui_returned_final_start = 3;

    // Chosen Provider Section

    optional int32 chosen_provider_uid = 4 [(is_uid) = true];
    // The timestamp, normalized from call began as '0' when the query phase starts
    optional int32 chosen_provider_query_start_timestamp_microseconds = 5;
    // The timestamp when the query phase ends
    optional int32 chosen_provider_query_end_timestamp_microseconds = 6;
    // The timestamp when the ui phase is invoked
    optional int32 chosen_provider_ui_invoked_timestamp_microseconds = 7;
    // The timestamp when the ui phase ends
    optional int32 chosen_provider_ui_finished_timestamp_microseconds = 8;
    // The timestamp when the final phase ends (returned to client)
    optional int32 chosen_provider_finished_timestamp_microseconds = 9;
    // The status of the chosen provider
    optional ProviderStatus chosen_provider_status = 10;
    // Reveals if there was an exception in the chosen_provider
    optional bool chosen_provider_has_exception = 11;
    // Reveals the actual entries of this provider prior to being chosen
    // Count can be pulled from this
    repeated EntryEnum chosen_provider_available_entries = 12;
    // The number of action entries
    optional int32 chosen_provider_action_entry_count = 13;
    // The number of credential entries
    optional int32 chosen_provider_credential_entry_count = 14;
    // The number of *types* of credential entries
    optional int32 chosen_provider_credential_entry_type_count = 15;
    // The number of remote entries
    optional int32 chosen_provider_remote_entry_count = 16;
    // The number of authentication entries
    optional int32 chosen_provider_authentication_entry_count = 17;

    // Selection Phase (the user may tap on many of these)

    // The chain of clicked entries regardless of provider
    repeated EntryEnum clicked_entries = 18;
    // The provider associated with the clicked entry above
    repeated int32 provider_of_clicked_entry = 19;

    // Final Information

    // The api result status
    optional ApiStatus api_status = 20;
}

/**
 * Logs when a CredentialManager api is called.
 * Logged from:
 *   frameworks/base/services/credentials/java/com/android/server/credentials/...
 */
message CredentialManagerApiCalled {
    // The api name
    optional ApiName api_name = 1;
    // The calling app uid
    optional int32 caller_uid = 2 [(is_uid) = true];
    // The api result status
    optional ApiStatus api_status = 3;

    // Interaction with providers

    // Candidate Provider Section

    repeated int32 candidate_provider_uid = 4 [(is_uid) = true];
    // From invocation to when the query was returned, we record this time
    repeated int32 candidate_provider_round_trip_time_overall_microseconds = 5;
    repeated ProviderStatus candidate_provider_status = 6;

    // Chosen Provider Section

    optional int32 chosen_provider_uid = 7 [(is_uid) = true];
    // From invocation to when the final credential is returned
    optional int32 chosen_provider_round_trip_time_overall_microseconds = 8;
    // From the post query press to when the final credential is returned
    optional int32 chosen_provider_round_trip_time_choice_microseconds = 9;
    optional ProviderStatus chosen_provider_status = 10;
}
