/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package android.os.statsd.credentials;

import "frameworks/proto_logging/stats/atom_field_options.proto";

option java_package = "com.android.os.credentials";
option java_multiple_files = true;

/**
 * Logs when a CredentialManager api is called.
 * Logged from:
 *   frameworks/base/services/credentials/java/com/android/server/credentials/...
 */
message CredentialManagerApiCalled {
    enum ApiName {
        API_NAME_UNKNOWN = 0;
        API_NAME_GET_CREDENTIAL = 1;
        API_NAME_CREATE_CREDENTIAL = 2;
        API_NAME_CLEAR_CREDENTIAL = 3;
        API_NAME_IS_ENABLED_CREDENTIAL_PROVIDER_SERVICE = 4;
    }

    enum ApiStatus {
        API_STATUS_UNKNOWN = 0;
        API_STATUS_SUCCESS = 1;
        API_STATUS_FAILURE = 2;
        API_STATUS_USER_CANCELED = 3;
        API_STATUS_CLIENT_CANCELED = 4;
    }

    enum ProviderStatus {
        PROVIDER_UNKNOWN = 0;
        // Indicates a successful query phase
        PROVIDER_QUERY_SUCCESS = 1;
        // Indicates a successful final phase
        PROVIDER_FINAL_SUCCESS = 2;
        // Indicates a query failure
        PROVIDER_QUERY_FAILURE = 3;
        // Indicates general failure during our final phase
        PROVIDER_FINAL_FAILURE = 4;
    }

    // The api name.
    optional ApiName api_name = 1;
    // The calling app uid.
    optional int32 caller_uid = 2 [(is_uid) = true];
    // The api result status.
    optional ApiStatus api_status = 3;

    // Interaction with providers

    // Candidate Provider Section

    repeated int32 candidate_provider_uid = 4 [(is_uid) = true];
    // From invocation to when the query was returned, we record this time
    repeated int32 candidate_provider_round_trip_time_overall_microseconds = 5;
    repeated ProviderStatus candidate_provider_status = 6;

    // Chosen Provider Section

    optional int32 chosen_provider_uid = 7 [(is_uid) = true];
    // From invocation to when the final credential is returned
    optional int32 chosen_provider_round_trip_time_overall_microseconds = 8;
    // From the post query press to when the final credential is returned
    optional int32 chosen_provider_round_trip_time_choice_microseconds = 9;
    optional ProviderStatus chosen_provider_status = 10;
}

