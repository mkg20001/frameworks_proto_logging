/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package android.os.statsd.wifi;

import "frameworks/proto_logging/stats/atom_field_options.proto";
import "frameworks/proto_logging/stats/atoms.proto";
import "frameworks/proto_logging/stats/enums/wifi/enums.proto";

option java_package = "com.android.os.wifi";
option java_multiple_files = true;

extend Atom {
    optional WifiAwareNdpReported wifi_aware_ndp_reported = 638 [(module) = "wifi"];
    optional WifiAwareAttachReported wifi_aware_attach_reported = 639 [(module) = "wifi"];
    optional WifiSelfRecoveryTriggered wifi_self_recovery_triggered = 661 [(module) = "wifi"];
}

/**
 * Logged when wifi aware data path is completed
 */
message WifiAwareNdpReported {
    enum Role {
        ROLE_UNKNOWN = 0;
        ROLE_INITIATOR = 1;
        ROLE_RESPONDER = 2;
    }
    // Role of data path
    optional Role role = 1;
    // If it is over out-of-band
    optional bool is_out_of_band = 2;
    // Status of NDP
    optional android.net.wifi.AwareStatus status = 3;
    // Duration to create NDP in millis.
    optional int32 ndp_latency_ms= 4;
    // The latency of discovery + NDP in millis.
    optional int32 discovery_ndp_latency_ms= 5;
    // Channel frequency in MHz, 0 if unavailable, >= 2400 otherwise.
    optional int32 channel_frequency_mhz= 6;
}

/**
 * Logged when wifi aware attach is completed
 */
message WifiAwareAttachReported {
    // Status of attach
    optional android.net.wifi.AwareStatus status = 1;
}

/**
 * Logged when wifi self recovery triggered
 */
message WifiSelfRecoveryTriggered {
    enum Reason {
        REASON_UNKNOWN = 0;
        REASON_LAST_RESORT_WDOG = 1;
        REASON_WIFINATIVE_FAILURE = 2;
        REASON_STA_IFACE_DOWN = 3;
        REASON_API_CALL = 4;
        REASON_SUBSYSTEM_RESTART = 5;
        REASON_IFACE_ADDED = 6;
    }
    enum Result {
        RES_UNSPECIFIED = 0;
        RES_RESTART_SUCCESS = 1;
        RES_INVALID_REASON = 2;
        RES_IFACE_DOWN = 3;
        RES_IFACE_ADD_DISABLED = 4;
        RES_RETRY_DISABLED = 5;
        RES_ABOVE_MAX_RETRY = 6;
        RES_RESTART_FAILURE = 7;
    }

    // Trigger reason
    optional Reason reason = 1;
    // Self recovery result
    optional Result result = 2;
}
